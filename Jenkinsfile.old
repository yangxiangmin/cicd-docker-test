pipeline {
    agent any
    
    environment {
        // 环境变量定义
        DOCKER_REGISTRY = "harbor.your-company.com"  // Docker镜像仓库地址
        PROJECT_NAME = "your-project"                // 项目名称
        APP_NAME = "demo-app"                        // 应用名称
        IMAGE_TAG = "${env.BUILD_NUMBER}"            // 使用Jenkins构建号作为镜像标签
        
        // 完整镜像地址
        BUILD_IMAGE = "${DOCKER_REGISTRY}/builder-images/${PROJECT_NAME}-builder:latest"    // 构建环境镜像
        APP_IMAGE = "${DOCKER_REGISTRY}/${PROJECT_NAME}/${APP_NAME}:${IMAGE_TAG}"           // 应用镜像
        
        // 凭证ID（在Jenkins凭据中配置）
        GIT_CREDENTIALS = "git-credentials"          // Git仓库凭证
        DOCKER_CREDENTIALS = "harbor-credentials"    // Docker仓库凭证
        K8S_CREDENTIALS = "k8s-cluster-creds"        // Kubernetes集群凭证
        SSH_CREDENTIALS = "prod-server-creds"        // 生产服务器SSH凭证
        
        // 环境配置
        DEPLOY_NAMESPACE = "production"              // 生产环境命名空间
        STAGING_NAMESPACE = "staging"                // 测试环境命名空间
    }
    
    stages {
        // 阶段1: 获取源代码
        stage('Checkout Source Code') {              // 定义一个名为"Checkout Source Code"的阶段
            steps {                                  // 该阶段包含的执行步骤
                checkout([                           // 调用Jenkins的checkout方法拉取代码
                    // 参数配置（闭包内容）
                    $class: 'GitSCM',                // 指定使用Git作为版本控制工具，表示使用Jenkins的Git插件（需预先安装），如果是SVN仓库则对应SubversionSCM
                    branches: [[name: '*/main']],    // 分支配置，等价于命令行：git checkout main
                    extensions: [],                  // 扩展功能配置
                    userRemoteConfigs: [[
                        url: 'https://github.com/your-org/your-repo.git',    // 远程仓库配置
                        credentialsId: GIT_CREDENTIALS                       // 认证方式使用Git仓库凭证
                        // 1.进入凭证管理（Jenkins首页 → 凭据 → 系统 → 全局凭据 → 添加凭据）
                        // 2.选择凭证类型（如果是HTTPS认证，则选择Username with password；如果SSH认证，则选择SSH Username with private key）
                        // 3.在Pipeline中引用，credentialsId: 'your-credential-id'  // 与创建时指定的ID一致
                    ]]
                ])
            }
        }
        
        // 阶段2: 拉取构建环境镜像
        stage('Pull Builder Image') {                // 定义一个名为"Pull Builder Image"的阶段
            steps {                                  // 该阶段包含的执行步骤
                script {                             // 启用Groovy脚本模式
                                                     // docker.withRegistry()，建立与Docker Registry的安全连接
                                                     // 拉取指定镜像，docker.image指定目标镜像，pull执行镜像拉取操作
                                                     // 1.进入凭证管理（Jenkins首页 → 凭据 → 系统 → 全局凭据 → 添加凭据）
                                                     // 2.选择凭证类型（选择Username with password，Docker registry用户名/密码）
                                                     // 3.环境变量中定义DOCKER_CREDENTIALS = 'harbor-creds' // 与创建时指定的ID一致
                    docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                        docker.image(BUILD_IMAGE).pull()
                                                     // 等效CLI命令：docker pull harbor.your-company.com/builder-images/your-project-builder:latest
                    }
                }
            }
        }
        
        // 阶段3: 编译代码
        stage('Build') {                             // 定义一个名为"Build"的阶段
            steps {                                  // 该阶段包含的执行步骤
                script {                             // 启用Groovy脚本模式
                                                     // docker.image指定使用的Docker镜像
                                                     // inside()方法表示在容器内执行代码块，例如inside('--arg1 value1 --arg2 value2')，inside('--cpus 2 --memory 4g --ulimit nofile=1024:1024')
                                                     // -v $WORKSPACE:/workspace：目录挂载，其中$WORKSPACE：Jenkins工作目录（自动变量），/workspace：容器内的挂载点
                                                     // -w /workspace：设置工作目录（等效于docker run -w）
                    docker.image(BUILD_IMAGE).inside('-v $WORKSPACE:/workspace -w /workspace') {
                                                     // 在容器内执行shell命令
                        sh '''
                            echo "开始编译..."
                            cd /workspace
                            make clean
                            make all
                            echo "编译完成!"
                        '''
                    }
                }
            }
        }
        
        // 阶段4: 运行测试
        stage('Test') {                               // 定义一个名为"Test"的阶段
            steps {                                   // 包含该阶段要执行的所有步骤
                script {                              // 允许在steps块中执行Groovy脚本
                                                      // 使用预先定义的BUILD_IMAGE Docker镜像启动一个容器
                                                      // inside()方法表示在容器内执行后续命令
                                                      // -v: 将Jenkins工作目录($WORKSPACE)挂载到容器的/workspace目录
                                                      // -w: 设置容器的工作目录为/workspace
                    docker.image(BUILD_IMAGE).inside('-v $WORKSPACE:/workspace -w /workspace') {
                        sh '''
                            echo "开始运行测试..."
                            cd /workspace
                            make test
                            echo "测试完成!"
                        '''
                    }
                    junit '**/test-results/*.xml'    // 收集测试报告
                }
            }
        }
        
        // 阶段5: 构建应用镜像
        stage('Build Application Image') {             // 定义一个名为"Build Application Image"的阶段
            steps {                                    // 包含该阶段要执行的所有步骤
                script {                               // 启用Groovy脚本模式
                                                       // 使用变量指定DOCKER_REGISTRY的Docker仓库地址
                                                       // 预先配置的Docker凭证DOCKER_CREDENTIALS
                                                       // docker.build(): 构建Docker镜像
                                                       // APP_IMAGE: 指定镜像名称(
                                                       // --build-arg: 将IMAGE_TAG的值传递给Dockerfile中的BUILD_NUMBER构建参数
                    docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                        def appImage = docker.build(APP_IMAGE, "--build-arg BUILD_NUMBER=${IMAGE_TAG} .")
                    }
                }
            }
        }
        
        // 阶段6: 推送应用镜像
        stage('Push Image') {                           // 定义一个名为"Push Image"的阶段，用于Docker镜像推送
            steps {                                     // 包含该阶段要执行的所有步骤
                script {                                // 允许在steps块中执行Groovy脚本
                                                        // 使用变量指定DOCKER_REGISTRY的Docker仓库地址
                                                        // 预先配置的Docker凭证DOCKER_CREDENTIALS
                                                        // docker.image(APP_IMAGE)：获取之前构建的镜像对象
                                                        // push()：推送镜像到Registry
                                                        // docker.image(APP_IMAGE).push('latest'),再次推送同一个镜像，但额外打上latest标签
                    docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                        docker.image(APP_IMAGE).push()
                        docker.image(APP_IMAGE).push('latest')
                    }
                }
            }
        }
        
        // 阶段7: 安全扫描（可选）
        stage('Security Scan') {
            steps {
                script {
                    sh "docker scan --file Dockerfile ${APP_IMAGE}"
                }
            }
        }
        
        // 阶段8: 部署到测试环境
        stage('Deploy to Staging') {                     // 定义一个名为"Deploy to Staging"的阶段
            when {
                branch 'develop'  // 只在develop分支触发
            }
            steps {                                      // 包含该阶段要执行的所有步骤
                script {                                 // 允许在steps块中执行Groovy脚本
                                                         // withKubeConfig使用了 Kubernetes 插件,设置和使用 Kubernetes 的配置,允许 Jenkins 与 Kubernetes 集群进行交互
                                                         // credentialsId: K8S_CREDENTIALS：使用预先在Jenkins中配置的Kubernetes凭证
                                                         // kubectl config set-context设置当前 Kubernetes 配置的命名空间为 STAGING_NAMESPACE
                                                         // kubectl set image 是一个用来更新部署的镜像的命令
                                                         // kubectl rollout status检查 Kubernetes 中的部署是否已成功完成,设置超时时间为300秒，如果部署在 5 分钟内没有完成，命令会超时并失败。
                    withKubeConfig([credentialsId: K8S_CREDENTIALS]) {
                        sh """
                            kubectl config set-context --current --namespace=${STAGING_NAMESPACE}
                            kubectl set image deployment/${APP_NAME} ${APP_NAME}=${APP_IMAGE} --record
                            kubectl rollout status deployment/${APP_NAME} --timeout=300s
                        """
                    }
                }
            }
        }
        
        // 阶段9: 生产环境审批
        stage('Production Approval') {                            // 定义一个名为"Production Approval"的阶段
            when {
                branch 'main'  // 只在main分支触发
            }
            steps {
                timeout(time: 24, unit: 'HOURS') {                // 设置审批等待的超时时间（24小时），如果超过时间无人审批，Pipeline会自动终止
                    input(
                        message: '确认部署到生产环境?',             // 展示给审批者的提示信息
                        ok: '确认部署',                            // 确认按钮的显示文本
                        submitter: 'devops-team,admin-team',      // 指定有审批权限的用户或组（逗号分隔），devops-team,admin-team表示这两个组的成员可以审批
                        parameters: [
                            choice(
                                name: 'DEPLOY_STRATEGY',          // 参数名
                                choices: ['rolling-update', 'blue-green', 'canary'],      // 可选的部署策略列表，rolling-update: 滚动更新（默认Kubernetes策略），blue-green: 蓝绿部署（零停机），canary: 金丝雀发布（渐进式）
                                description: '选择部署策略'
                            ),
                            booleanParam(
                                name: 'RUN_SMOKE_TEST',            // 部署后是否进行冒烟测试
                                defaultValue: true,                // 默认为进行冒烟测试
                                description: '部署后是否运行冒烟测试?'
                            )
                        ]
                    )
                }
            }
        }
        
        // 阶段10: 部署到生产环境
        stage('Deploy to Production') {
            when {
                branch 'main'
                beforeInput false  // 确保审批后继续执行
            }
            steps {
                script {
                    // 根据选择的策略部署
                    // 使用params.DEPLOY_STRATEGY获取审批阶段选择的部署策略
                    if (params.DEPLOY_STRATEGY == 'blue-green') {
                        // 蓝绿部署逻辑
                        withKubeConfig([credentialsId: K8S_CREDENTIALS]) {
                            sh """
                                kubectl config set-context --current --namespace=${DEPLOY_NAMESPACE}
                                # 蓝绿部署具体命令
                                kubectl apply -f kubernetes/production-blue.yaml
                                kubectl apply -f kubernetes/production-green.yaml
                                # 切换流量
                                kubectl patch svc/${APP_NAME} -p '{"spec":{"selector":{"version":"${IMAGE_TAG}"}}}'
                            """
                        }
                    } else {
                        // 默认滚动更新
                        withKubeConfig([credentialsId: K8S_CREDENTIALS]) {
                            sh """
                                kubectl config set-context --current --namespace=${DEPLOY_NAMESPACE}
                                kubectl set image deployment/${APP_NAME} ${APP_NAME}=${APP_IMAGE} --record
                                kubectl rollout status deployment/${APP_NAME} --timeout=600s
                            """
                        }
                    }
                    
                    // 如果选择了运行冒烟测试
                    if (params.RUN_SMOKE_TEST.toBoolean()) {
                        withKubeConfig([credentialsId: K8S_CREDENTIALS]) {
                            sh """
                                kubectl config set-context --current --namespace=${DEPLOY_NAMESPACE}
                                kubectl run smoke-test --image=${APP_IMAGE} --restart=Never -- /app/smoke-test.sh
                                kubectl logs -f smoke-test
                                kubectl delete pod smoke-test
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // 清理工作空间和Docker资源
            cleanWs()
            sh """
                docker rmi ${APP_IMAGE} || true
                docker system prune -f
            """
            
            // 构建通知
            script {
                def buildStatus = currentBuild.result ?: 'SUCCESS'
                def color = buildStatus == 'SUCCESS' ? 'good' : 'danger'
                def message = "构建结果: ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${buildStatus}\n" +
                              "镜像地址: ${APP_IMAGE}\n" +
                              "构建详情: ${env.BUILD_URL}"
                
                if (currentBuild.result == 'SUCCESS' && env.BRANCH_NAME == 'main') {
                    message += "\n生产环境部署完成! 版本: ${IMAGE_TAG}"
                }
                
                slackSend(color: color, message: message)
                emailext(
                    subject: "构建通知: ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${buildStatus}",
                    body: message,
                    to: 'devops-team@your-company.com'
                )
            }
        }
        
        failure {
            // 失败时自动回滚生产环境
            script {
                if (env.BRANCH_NAME == 'main') {
                    withKubeConfig([credentialsId: K8S_CREDENTIALS]) {
                        sh """
                            kubectl config set-context --current --namespace=${DEPLOY_NAMESPACE}
                            kubectl rollout undo deployment/${APP_NAME}
                            echo "由于构建失败，已自动回滚生产环境"
                        """
                    }
                }
            }
        }
        
        regression {
            // 当构建状态从成功变为失败时的特殊处理
            script {
                if (env.BRANCH_NAME == 'main') {
                    slackSend(
                        color: 'danger',
                        message: "警告: 生产环境构建出现回归!\n" +
                                 "项目: ${env.JOB_NAME}\n" +
                                 "构建号: ${env.BUILD_NUMBER}\n" +
                                 "详情: ${env.BUILD_URL}"
                    )
                }
            }
        }
    }
}